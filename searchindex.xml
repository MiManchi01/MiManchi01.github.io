<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>字符串详解与格式化输出</title><url>https://mimanchi01.github.io/post/python_basic_knowledge/%E6%97%A0%E5%BA%8F%E5%BA%8F%E5%88%97%E6%95%A3%E5%88%97%E7%B1%BB%E5%9E%8B/</url><categories><category>python</category></categories><tags><tag>python</tag></tags><content type="html"> Python基础知识总结（七）
一、字典（dict） 字典是以键值对（key_vaule）的方式存在；两者是一种映射关系。
1.1 字典的创建 键值对（{键 ：值}）
字典使用{}：
字典名 = {键 ：值，键1：值1，键2 ：值2，键3 ：值3……} 代码：
grade = {'Chinese':99 , 'Math':100} print(grade) grade1 = {'Chinese':98 , 'Math':150 , 'English':99} print(grade1) 字典的键是唯一不可变的， 不可修改 ；字典的键可以是数字 ， 字符串 。字典值（value）可以是任意（Python支持的）数据类型
当字典中的键重复了，原有的值将会被覆盖掉
字典的输出
字典名[key] print(name['姓名']) 1.2 字典值的查询 字典与前面的有序序列的区别就是，字典不可以通过下标查询
通过键（key）查询
get :通过键名获得值 如果键不存在，就会返回None
语法格式：
字典名[key] 字典名.get(key) 示例：
name = {'姓名':"阿宸" , '年龄':25 , '联系地址':"广州天河"} print(name['联系地址']) print(name.get('年龄')) print(name.get('性别')) 格式：
字典名.keys() 字典名.values() 字典名.items() 代码
print(name.keys()) #获得字典中所有的键 print(name.values()) # 获得字典中所有的值 print(name.items()) #获得字典中所有的键值对 1.3 字典值键值对的增加 格式：
字典名[key] = 值 当键存在时，将会修改原有的值 ，把原有的值覆盖掉
setdefault ( ) 方法
字典名.setdefault ( 键 ，值) 当键存在时，不会对其进行任何修改
当值没有进行传递时。会默认为None
代码：
name['性别'] = '男' print(name) name.setdefault('身高',178) print(name) update( ) 方法
即可增加也可以修改，并且一次可以多个个值的增加
格式：
字典名.update({键 ：值，键1：值1}) 当键存在是，将对原有的值进行修改
代码：
name.update({'身高':179 ,'体重':73.5}) print(name) name.update({'身高':181}) print(name) 1.4 字典键值对的删除 ​ pop 方法：删除指定的键
字典名.pop(key) popitem( ) 删除一个键值对 (有些版本是删除最后一个)
字典名.popitem() clear 清空字典
字典名.clear() del
del 字典名[key] 本质：用更好的方式对数据进行存储 ，有可以对数据进行解释说明的内容；有较好的可读性。
二、集合（set） 在python中集合的概念跟中学数学集合的概念是一致的。
集合的特性：无序性 ， 唯一性。
2.1 集合的创建 格式：
集合名 = {元素 ， 元素 ， 元素……} 集合的元素不可以是列表 ， 集合的本身的可变的，但是集合里面的元素是不可变的。
示例：
A = {56 , 89 , 99 , '阿宸' , 89 , True , ('李耀' , 56)} print(A) B = {1 ,2 ,12 ,1 ,2 ,3 ,4 ,1 ,1,1,1,1} print(B) c = set() print(type(c)) D = set({'老黄','木槿','默契'}) print(D) 创建空集合使用set（）
2.2 集合的增加与删除 add（）方法
格式
集合名.add(元素) 代码：
E = {15 , 1 , 52 , 5 , 1 ,6} print(E) E.add(666) print(E) remove()方法
格式：
集合名.remove(元素) discard()方法
集合名.discard(元素) 当删除的元素不存在，不会报错
代码；
E.remove(15) print(E) E.discard(66) print(E) E.discard(6) print(E) 2.3 集合间的运算 集合在编程中的运算符：
符号 含义 &amp; 交集 ，获得两个集合的公共元素 | 并集 ，获得两个集合的全部元素 - 差集，获得前面集合在后一个集合中没有的元素 ^ 对称差集，获得两个集合除公共元素外的所有元素（并集-交集） 代码：
a = {2,5,18,6,1,4,8} b = {4,5,35,6,1,8} print(a &amp; b) # &amp; shift + 7 计算交集 print(a | b) # &amp; shift + \ 计算并集 print(a - b) # 计算差集 print(a ^ b) # &amp; shift + 6 计算对称差集 a 青菜 ， 土豆 ， 肉 ， 鱼 b 青菜 ， 豆腐 本质：存储非重复的数据. 去重</content></entry><entry><title>字符串详解与格式化输出</title><url>https://mimanchi01.github.io/post/python_basic_knowledge/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</url><categories><category>python</category></categories><tags><tag>python</tag></tags><content type="html"> Python基础知识总结（六）
一、字符串 是一个序列类型，是不可变。（元组、数字类型也是不可变类型）
>>> str1 = '今天是大年初八' >>> print(str1) 今天是大年初八 str1 = ''' 你的名字 ： 阿宸 岗位 ： Python讲师 ''' print(str1) 1.1 字符串的增加 ​ 字符串的拼接 使用 +
str1 = 'Python 40 期' str2 = '班主任：木槿' print(str1 + str2) print(str1 + '大班课') print(str1) ​ 字符串的重复输出 *
str1 = '大家好棒' print(str1 * 10) print('~~~~~~~~~~~') print(str1) 1.2 字符串的删除 ​ replace () 方法
格式：
字符串名.replace('要修改的值','替换值') 字符串名.replace('要修改的值','替换值',替换次数) 当替换值为空时，就可以表示删除之意。
示例：
str1 = '阿宸老师是直播见里面最帅的！' print(str1.replace('阿宸','')) # 字符串的替换 print(str1.replace('阿宸','七零')) # 字符串的多值替换 str2 = '大家好棒棒高棒棒棒棒棒棒棒棒棒' print(str2.replace('棒','好棒',5)) 1.3 字符串的查询 count()方式
统计字符的出现次数
格式：
字符串名.count('要统计的字符') 实例：
str2 = '大家好棒棒高棒棒棒棒棒棒棒棒棒' print(str2.count('棒')) find()方法
该方法得到的结果就是字符串的下标
格式：
字符串名.find("要查找的字符") 字符串名.find("要查找的字符" ， 起始值) 当字符在字符串中多次出现，得到的结构是最小下标值
当要查找的字符有多个字符的话，得到的是第一个字符的下标
该方法如果查询的字符不存在返回的结果是 -1
实例：
str1 = '今天天气不错适合去爬山' print(str1.find('错')) print(str1.find('天')) print(str1.find('不错')) print(str1.find('适' , 3)) print(str1.find('适' , 10)) endswith( ) 方法
判断字符串的尾字符是否与指定字符相同，该方法的结果就是bool
格式 ：
字符串名.endswith('指定字符') 实例：
str1 = '今天是2月8号' print(str1.endswith('号')) print(str1.endswith('7号')) isdigit() 方法
判断字符串中的字符是否都为数字,返回结果为bool
格式：
字符串名.isdigit() 实例：
str1 = '2375423' str2 = '2346hello62347' print(str1.isdigit()) print(str2.isdigit()) isalpha() 方法
判断字符串中的字符是否都为字符,返回结果为bool
格式：
字符串名.isalpha() 实例：
str1 = 'hello' str2 = 'hello+sduh' print(str1.isalpha()) print(str2.isalpha()) 1.4 字符串的修改 split() 方法
字符串的切割
格式：
字符串名.split("切割字符") 实例：
str1 = '阿宸好奔溃啊！' res = str1.split('好') print(res) print(type(res)) strip()方法
去除字符串前后空格
格式：
字符串名.strip() 实例：
str1 = ' 把阿宸杀了吧! ' print(str1.strip()) upper()方法
将字符串中的字符全部大写
lower（）方法
将字符串中的字符全部小写
title（）方法
将字符串中的字符首字母大写
实例：
str1 = 'how old are you' print(str1.upper()) str2 = 'HOW OLD ARE YOU' print(str2.lower()) str3 = 'how old are you' print(str3.title()) 二、格式化输出 num = 40 teacher = '阿宸' print('这是Python',num ,'期') print("主讲老师"+teacher) f 格式化
f'字符串'在需要添加变量的地方+{变量名} num = 40 teacher = '阿宸' ##print('这是Python',num ,'期') ##print("主讲老师"+teacher) print(f'这是Python{num}期') print(f"主讲老师{teacher}") % 占位格式化
% 占位符 %s 表示字符串 %d 表示整型 %f 表示浮点型 age = 25 name = '阿宸' work = 'Python讲师' print(''' -----个人介绍 姓名：%s年龄：%d职业：%s'''%(name , age , work)) num = 40 print('经过%d年'%num) height = 177.9999 print('我的身高%f'%height) print('我的身高%.2f'%height) print('我的体重%.2f千克'%(73.5)) format（)格式化
age = 25 name = '阿宸' work = 'Python讲师' print(''' -----个人介绍 姓名：{}年龄：{}职业：{}'''.format(name , age , work)) print('我来自{},今年{}'.format('广东', 25)) 推荐网址：
题目：https://www.runoob.com/python3/python3-examples.html
题目：https://www.runoob.com/quiz/python-quiz.html
知识：http://c.biancheng.net/
http://www.cxy521.com/</content></entry><entry><title>运算符</title><url>https://mimanchi01.github.io/post/python_basic_knowledge/%E8%BF%90%E7%AE%97%E7%AC%A6/</url><categories><category>python</category></categories><tags><tag>python</tag></tags><content type="html"> Python基础知识总结（四）
一、基本数据类型的转换 数据类型的转换有两种形式:自动转换；强制转换
# 自动转换 bool True(1) False(0) >>> 1 + True 2 >>> 1+False 1 # 强制转换 字符串的转换 str() #将其他数据类型转变为字符串 >>> age = 25 >>> type(age) &lt;class 'int'> >>> str(age) '25' >>> res = str(age) >>> type(res) &lt;class 'str'> >>> res '25' # 转换成整型 int() #只有与整型类似的数据类型才可以进行转换 >>> str1 = '25' >>> type(str1) &lt;class 'str'> >>> res = int(str1) >>> type(res) &lt;class 'int'> >>> res 25 # 转换浮点型 float() #只有与浮点型类似的数据类型才可以进行转换 >>> str1 = '25.5' >>> res = float(str1) >>> type(res) &lt;class 'float'> >>> age = 25 >>> res = float(age) >>> type(res) &lt;class 'float'> >>> res 25.0 list() #转换成列表 tuple() #转换成元组 #转成bool bool() # 得到的结果是True、False # 结果为False的情况：空字符串，数字0/0.0；当数据类型为空时，得到的结果都为False，其余情况都为True >>> age = 12 >>> res = bool(age) >>> res True >>> age = 0 >>> res = bool(age) >>> res False >>> str1 = '' >>> res = bool(str1) >>> res False >>> name = [] >>> res = bool(name) >>> res False # 接受输入 >>> input("正方形的边长为：") 正方形的边长为：22 '22' >>> B = input("正方形的边长为：") 正方形的边长为：22 >>> B '22' >>> type(B) &lt;class 'str'> >>> B = int(input("正方形的边长为：")) 正方形的边长为：22 >>> type(B) &lt;class 'int'> >>> B * B 484 二、运算符 2.1 算术运算符 符号 含义 + 加法 - 减法 * 乘法 / 除法(得到的结果是浮点型) % 取余（得到余数） // 整除（有余数的情况下，得到整数部分） ** 幂（乘方） 2.2 赋值运算符 符号 含义 实例 = 赋值运算 c = a + b += 加赋值 a += b &mdash;> a = a + b -= 减赋值 a -= b &mdash;> a = a - b *= 乘法赋值 a *= b &mdash;> a = a * b /= 除法赋值 a /= b &mdash;> a = a / b //= 整除赋值 a //= b &mdash;> a = a // b %= 取余赋值 a %= b &mdash;> a = a % b **= 幂赋值 a **= b &mdash;> a = a **b 2.3 比较运算符 比较运算符得到的结果是bool
符号 含义 > 大于号，比较两边数值的大小，返回结果是布尔型 &lt; 小于号 == 等号，仅比较两边数值是否相等（可以比较两边字符串是否相同） >= 大于等于 &lt;= 小于等于 != 不等于 >>> print(5>22) False >>> print(22 == 25) False >>> print(56 >= 56) True >>> print(88 >= 99) False >>> print(66 != 77) True >>> print(66 != 66) False 2.4 逻辑运算符 得到的结果是bool
符号 含义 and 与运算，与中学数学中&rsquo;且&rsquo;含义一样。and左右两边的值必须都为真才为真否则为假 or 或运算，与中学数学中&rsquo;或&rsquo;含义一样。or左右两边的值有一个为真则为真，全为假才假 not 非运算，与中学数学中&rsquo;非&rsquo;含义一样。取反之意；即not后的值为真则结果为假，否则反之 >>> True and False False >>> True and True True >>> False and False False >>> True or False True >>> True or True True >>> False or False False >>> not False True >>> not True False # 阿宸：语文 95 数学 98 就站门口两个小时 >>> C = int(input("语文成绩：")) 语文成绩：99 >>> M = int(input("数学成绩：")) 数学成绩：90 >>> print(C >= 95 and M>= 98) False >>> print(C >= 95 or M>= 98) True # 短路 and ：当and前面的值为假，and就不往后面执行 >>> 1 and 0 0 >>> 0 and 1 0 >>> 0 and 2 0 >>> 1 and 1 1 or: 当or前面的值为真，or就不往后面执行 >>> 1 or 0 1 >>> 0 or 1 1 >>> 0 or 0 0 >>> 1 or 2 1 2.5 成员运算符 得到的结果是bool
in : 表示该元素（数据）在该序列中
not in : 表示该元素（数据）不在该序列中
>>> name = '黄泽鑫' >>> print('鑫' in name) True >>> str1 = "阿宸很帅" >>> print('丑' in str1) False >>> print("丑" in str1) False >>> print("丑" not in str1) True >>> ls = [23 , 33 , 43 , 34] >>> print(45 in ls) False >>> print(23 in ls) True 2.6 运算符优先级 >>> 2 + 1 * 3 5 >>> 23 and 1 - 1 0 >>> 23 > 20 + 1 True >>> 23 > 25 - 5 True >>> 三、编辑器的安装 、作业 1、运算符（考虑变量转换问题） （1）已知小明的成绩是98分，小白的成绩比小明低2.5分 求小白的成绩
（2）从控制台输入一个学生的语文英语和数学成绩 求该学生的平均成绩
（3）从控制台分别输入学生1和学生2 的数学成绩 输出学生1的成绩是否比学生2的成绩低
（4）计算圆的面积
用户输入的是圆的直径 （5）摄氏度转为华氏温度
接受用户输入的摄氏温度数值 转化公式：华氏温度 = （摄氏度 * 1.8）+ 32 （6）计算BMI指数
接受用户输入的身高（单位/米）、体重（单位/千克） BMI指数为体重除以身高的平方 （7）鸡兔同笼
用户输入鸡兔总共的只数，腿的总数 结合运算符得到鸡兔分别有多少只 8 ``苹果的价格是8.5元一斤 ``买了7.5斤苹果 ``计算付款金额并输出 9、已知买5支铅笔要6元钱，控制台输出17支铅笔多少钱？（a÷b代码用a/b表示）(难度★)</content></entry><entry><title>有序序列的基本方法</title><url>https://mimanchi01.github.io/post/python_basic_knowledge/%E6%9C%89%E5%BA%8F%E5%BA%8F%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/</url><categories><category>python</category></categories><tags><tag>python</tag></tags><content type="html"> Python基础知识总结（三）
idle脚本模式注释：alt + 3，解除注释：alt + 4
一、列表(list) 格式：
list_name = ['数据','数据','数据'……] 实例：
>>> name = ['阿宸' ,['方芳','马华腾'],'刘立健'] >>> print(name[1]) ['方芳', '马华腾'] >>> print(name[1][1]) 马华腾 >>> print(name[1][1][1]) 华 1.1 列表元素的增加 append（）方法 该方法的新增元素都添加在列表的末尾。
语法格式：
列表名.append(新增数据) 实例：
subject = ['语文','数学'] print(subject) # 增加科目“英语” #列表名.append(新增数据) subject.append("英语") print(subject) subject.append("李耀") print(subject) extend（）方法 该方法的新增元素都添加在列表的末尾。
语法格式：
列表名.extend(新增数据) 实例：
study = ['Java' , 'Python'] print(study) # C study.extend("C") print(study) append跟extend的区别
append将我们的新增的元素视为一个完整元素进行一个添加，而extend则是将可拆分的元素进行细分之后进行添加
name = ['语文','数学', '张琦' , '杨宝龙'] #1、苏俊澄 ， 2、蔡思劼 name.append('苏俊澄') print(name) name.extend('蔡思劼') print(name) # ['李圣伟','代睿辰'] name.append(['李圣伟','代睿辰']) print(name) name.extend(['李圣伟','代睿辰']) print(name) insert（）方法 可以根据我们的指定位置进行增加
语法格式：
列表名.insert(下标值，新增数据) 实例：
grade = [666 , 650 , 630 ,590] print(grade) # 645 一定要按照成绩排名的顺序进行添加 #列表名.insert(下标值，新增数据) grade.insert(2 , 645) print(grade) 1.2 列表元素的删除 remove（） 方法 当列表中数据重复时，只删除下标值最小的数据
语法格式：
列表名.remove(数据) 实例：
# 645 一定要按照成绩排名的顺序进行添加 #列表名.remove(数据) grade.remove(590) print(grade) pop（）方法 语法格式：
列表名.pop(下标) 当下标没有写的话，会默认删除列表的最后一位元素。
实例：
grade = [666 ,650 , 645 , 630 ,590] print(grade) #列表名.pop(下标) grade.pop(2) print(grade) grade.pop() print(grade) clear （）方法 该方法会将元素全部删除，使其成为一个空列表
语法格式：
列表名.clear() 实例：
grade = [666 ,650 , 645 , 630 ,590] grade.clear() print(grade) del 该函数可以删除一段元素
语法格式：
del 列表名[起始值：终点值] 实例：
del name[:2] print(name) del name[::2] print(name) del name print(name) 当del函数后面没有参数的操作，会将整个列表进行删除
1.3 列表元素的修改 列表单个元素的修改 格式：
列表名[下标]= 新元素 实例：
name = ['张琦' , '杨宝龙','阿宸', '李圣伟','代睿辰'] print(name) #列表名[下标]= 新元素 name[2] = '李耀' print(name) 列表一段元素的修改 格式
列表名[起始值：终点值]= 新元素 实例：
name = ['张琦' , '杨宝龙','阿宸', '黄泽鑫' ,'李圣伟','代睿辰'] print(name) ###列表名[下标]= 新元素 ##name[2] = '李耀' ##print(name) name[2:4] = "杨京宝",'宋小林' print(name) name1 = ['张琦' , '杨宝龙','阿宸', '黄泽鑫' ,'李圣伟','代睿辰'] print(name1) name1[2:4] = '张迎秋' print(name1) 1.4 列表元素的查询 index（）方法 该方法得到的结果是该元素的下标
格式：
列表名.index(数据，起始值，终点值) 实例：
name = ['张琦' , '杨宝龙','阿宸', '黄泽鑫' ,'李圣伟','代睿辰'] print(name.index('代睿辰')) print(name.index('李圣伟', 0 , 3)) count（）方法 该方法时统计该元素在列表中出现的次数
格式：
列表名.count(数据) 实例：
grade = [99 , 98 , 97 , 88 , 88 , 76 , 60 , 60 ,60] print(grade.count(60)) print(grade.count(50)) 1.5 列表长度 len（） 该函数统计列表长度
格式：
len(列表名) 实例：
grade = [99 , 98 , 97 , 88 , 88 , 76 , 60 , 60 ,60] print(len(grade)) 作业 1、列表
- 创建一个类似地铁线路的停站的列表； - 地铁线路扩建，在最开始部分增加了两个站 - 地铁线路扩建，在第5个站后面增加了一个站 - 因第8个地铁站老旧，停止使用，在线路上删除此站 - 找出第3到8之间所有的站点 2、我现在想知道一个数据的类型时候应该使用__________。
3、列举出至少3点做法或者误区 &ndash;> 关于高效提问
4、简述Python中目前学习到的几种数据类型,分别为什么？
5、简述变量的命名规范有哪些
6、python的bool类型只有两个值为啥？
7、列表
7.1嘉宾名单：如果你可以邀请任何人一起共进晚餐（无论是在世的还是故去的），你会邀请哪些人？请创建一个列表，其中包含至少 3 个你想邀请的人；然后，使用这个列表打印消息，邀请这些人来与你共进晚餐。 7.2：你刚得知有位嘉宾无法赴约，因此需要另外邀请一位嘉宾。  以完成练习 7.1 时编写的程序为基础，在程序末尾添加一条 print 语句，指出哪 位嘉宾无法赴约。  修改嘉宾名单，将无法赴约的嘉宾的姓名替换为新邀请的嘉宾的姓名。  再次打印一系列消息，向名单中的每位嘉宾发出邀请。 7.3：你刚找到了一个更大的餐桌，可容纳更多的嘉宾。请想想你还想邀请哪三位嘉宾。  以完成练习 7.1 或练习 7.2 时编写的程序为基础，在程序末尾添加一条 print 语句，指出你找到了一个更大的餐桌。  使用 insert()将一位新嘉宾添加到名单开头。  使用 insert()将另一位新嘉宾添加到名单中间。  使用 append()将最后一位新嘉宾添加到名单末尾。  打印一系列消息，向名单中的每位嘉宾发出邀请。 7.4：你刚得知新购买的餐桌无法及时送达，因此只能邀请两位嘉宾。  以完成练习7.3 时编写的程序为基础，在程序末尾添加一行代码，打印一条你只 能邀请两位嘉宾共进晚餐的消息。  使用 pop()不断地删除名单中的嘉宾，直到只有两位嘉宾为止。每次从名单中弹出一位嘉宾时，都打印一条消息，让该嘉宾知悉你很抱歉，无法邀请他来共进晚餐。  对于余下的两位嘉宾中的每一位，都打印一条消息，指出他依然在受邀人之列。  使用 del 将最后两位嘉宾从名单中删除，让名单变成空的。打印该名单，核实程序结束时名单确实是空的。 8、变量的本质是什么？
9、元组
定义一个元组，保存10个同学的成绩，成绩安装降序进行保存到元组中 5.1 获得前三名的成绩 5.2 获得第5到第8名的成绩 5.3 获得第4跟第6的成绩 5.4 获得第9，第6以及第3的成绩 5.5 获得最高分以及最低分</content></entry><entry><title>数据类型——序列</title><url>https://mimanchi01.github.io/post/python_basic_knowledge/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%BA%8F%E5%88%97/</url><categories><category>python</category></categories><tags><tag>python</tag></tags><content type="html"> Python基础知识总结（二）
一、序列 序列是一个可以存放多个值的一个容器，序列中每个值都有对应下标（索引）
下标：就相当于酒店房间号，方便客人查找与酒店管理
在编程中下标的起始值与我们日常生活中的计数是不同，下标计数从0开始往右递增，下标的逆向计数是从-1往左递减
1、切片 字符串是一个有序序列
切片就是当我们需要该序列中某一个值或者一段值的时候，就可以使用切片，进行操作
1.1 获取一个值 格式：
序列名[下标] #该方括号要再英文状态下输入 实例：
verse = 天生我材必有用 # 我 >>> print(verse[2]) 我 >>> print(verse[-5]) 我 >>> name = '代睿辰' >>> print(name[1]) 睿 1.2 多个值的切片 格式:
序列名[起始值:终点值] #左闭右开区间；终点值是不包括该位置的值 name[start:end] 实例：
verse = '天生我材必有用' #必有用 >>> print(verse[4:6]) 必有 >>> print(verse[4:7]) 必有用 #包头不包尾 #当我们切片的时候，该值再序列的最后一位时，就可以省略终点值下标 >>> print(verse[4:]) 必有用 #包尾不包头 #我们切片的时候，起始值在该序列的第一位时，就可以省略起始值下标 >>> print(verse[0:3]) 天生我 >>> print(verse[:3]) 天生我 >>> print(verse[-5:-2]) 我材必 >>> print(verse[-4:-1]) 材必有 1.3步长 格式：
序列名[起始值:终点值:步长] #左闭右开区间；终点值是不包括该位置的值 name[start🔚step]#步长默认为1 实例：
verse = '天生我材必有用' #天我比用 >>> verse = '天生我材必有用' >>> print(verse[0:7:2]) 天我必用 >>> print(verse[::2]) 天我必用 1.4 逆向输出 逆向的起始值从右开始
>>> name = '李梓楠王伸罗炜' >>> print(name[4:2:-1]) 伸王 >>> print(name[-3:-5:-1]) 伸王 二、列表(list) 列表是一个可以存放多个的容器
定义列表：
列表名 = [数据，数据1，数据2……] list = [element,element1,element2,……] 实例：
>>> name = ['杨宝龙','李可振','李圣伟','张琦','周俊杰'] >>> print(name) ['杨宝龙', '李可振', '李圣伟', '张琦', '周俊杰'] 2.1 列表元素的多样化 >>> xx = ['阿宸' , 25 , 189 , True] >>> print(xx) ['阿宸', 25, 189, True] >>> xx = ['阿宸', 25,['陈玉柱','李晶晶']] >>> print(xx) ['阿宸', 25, ['陈玉柱', '李晶晶']] >>> 2.2 列表切片 >>> name = ['杨宝龙','李可振','李圣伟','张琦','周俊杰'] >>> print(name[2]) 李圣伟 >>> print(name[2:5]) ['李圣伟', '张琦', '周俊杰'] >>> print(name[2:]) ['李圣伟', '张琦', '周俊杰'] >>> print(name[-1:-4:-1]) ['周俊杰', '张琦', '李圣伟'] 三、元组(tuple) 元组是一个可以存放多个的容器；元组是不可修改的
元组一经创建不可修改
定义元组：
元组名 = （数据，数据1，数据2……） tuple_name = （element,element1,element2,……） 实例：
>>> name = ('庄前瑶','宋郡','何梦蝶','方芳') >>> print(name) ('庄前瑶', '宋郡', '何梦蝶', '方芳') >>> print(name[3]) 方芳 >>> print(name[2]) 何梦蝶 单个元素元组的创建，必须在末尾加上逗号，否则解释器回认为该类型不是一个元组
>>> name = ('李圣伟') >>> type(name) &lt;class 'str'> >>> name = ('李圣伟',) >>> type(name) &lt;class 'tuple'> 作业 一、列表
创建一个小组成员名字列表
​ 1、使用切片对后三位成员的名字输出
​ 2、每隔一位成员输出
二、元组
创建一个地铁站点的元组
​ 1、输出第3个到第5个站点之间的所有站点的名字（包括第5个站点）
​ 2、输出第1个到第7个站点（不包括第7个）
三、字符串
​ 1、定义一个day=’20211230‘的字符串，利用切片让输出格式为2021年12月30日
​ 2、字符串“人生得意须尽欢” 输出“人得须欢”，逆向输出字符串</content></entry><entry><title>变量与基本数据类型</title><url>https://mimanchi01.github.io/post/python_basic_knowledge/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url><categories><category>python</category></categories><tags><tag>python</tag></tags><content type="html"> Python基础知识总结（一）
一、变量（Variable） 会变化的量。日常生活中什么是变量:钱、头发，时间……
Python中如何去定义一个变量：
变量名 = 变量值 name = value # = 赋值符号（赋值过程，右边的值赋值到左边） 当print后面的括号中放的是变量的话不需要加引号
>>> name = '阿宸' >>> print(name) 阿宸 >>> age = 18 >>> print(age) 18 1.2 变量的命名方式与规则 变量名的组成 : 英文字母、数字、下划线（变量名中数字不能开头）
Python是区分大小写
命名格式：
驼峰式命名：
大驼峰：每个单词的首字母大写
小驼峰：除了第一个单词外，往后的每个单词首字母大写
>>> MyName = '黄泽鑫' >>> print(MyName) 黄泽鑫 >>> myName = '阿宸' >>> print(myName) 阿宸 >>> myname = '杨凤' >>> print(myname) 杨凤 >>> Myname = '刘静宜' >>> print(Myname) 刘静宜 >>> youname = '李耀' >>> print(youname) 李耀 链式：用下划线对每个单词进行连接
>>> my_age = 18 >>> print(my_age) 18 Python中将名字全部大写表示一个常量
Python中内置的关键字（标识符）是不可以用来命名。
>>> import keyword >>> keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] Python中内置的函数不建议用来做变量名，当使用内置函数进行变量命名的话，该函数的原本含义会被覆盖，无法使用该函数的原本含义，Python解释器会报错
>>> print = '章林' >>> print '章林' >>> print('我叫罗炜') Traceback (most recent call last): File "&lt;pyshell#6>", line 1, in &lt;module> print('我叫罗炜') TypeError: 'str' object is not callable 变量命名一定要见名之意
本质：就是用来存放数据
二、注释 注释:就是对代码进行解释说明，注释是不会被解释运行出来的，只是给我们人看的。增加代码的可读性。
python中注释分为两种：单行注释；多行注释
2.1单行注释 使用 # 表示
>>> age = 18 # 这个是阿宸的年龄 >>> age 18 >>> # 这是40期的同学的名字 >>> name = '杨宝龙' >>> name '杨宝龙' 2.2 多行注释 使用三引号
''' 我是多行注释 这是第二行 这是第三行 ''' print('我叫刘一飞') """ 我是多行注释 这是第二行 这是第三行 """ print('我叫王亚琪') 一篇完整的代码其中注释要包括全篇的1/3篇幅
三、基本数据类型（type） 3.1整型（int） 用来存放整数的。比如：年龄，人
注意：整数的第一位不能是0（0除外）
>>> age = 18 >>> age 18 >>> people = 1 >>> people 1 3.2 浮点型（float） 浮点型就是小数；比如：圆周率、体重、身高
>>> money = 3.9 >>> money 3.9 >>> height = 1.8 >>> height 1.8 >>> weight = 73 >>> weight 73 >>> weight = 73.5 >>> weight 73.5 验证数据类型
>>> age = 18 >>> height = 1.8 >>> type(age) &lt;class 'int'> >>> type(height) &lt;class 'float'> 3.4 布尔类型（bool） 简单理解：就是判断对错真假
结果只有两种;True 、False
>>> 25+22 &lt; 22 False >>> 22+22 &lt; 55 True 3.5 字符串（str） 字符串是需要用引号进行括起来才属于字符串（单、双、三引号）
>>> str1 = '今天是Python开发基础的第二天' >>> print(str1) 今天是Python开发基础的第二天 >>> str2 = "今天依然还是阿宸" >>> print(str2) 今天依然还是阿宸 # 阿宸说:"明天就双休啦！" 引号嵌套与转义字符
嵌套：不同类型的引号可以相互嵌套
>>> str3 = '阿宸说:"明天就双休啦！"' >>> print(str3) 阿宸说:"明天就双休啦！" >>> str4 = "阿宸说:\"明天就双休啦！\"" >>> print(str4) 阿宸说:"明天就双休啦！" >>> str5 = '阿宸\n黄泽鑫' >>> print(str5) 阿宸 黄泽鑫 >>> student = '张琦' >>> teacher = '阿宸' >>> print("40期班级同学的名字："+ student) 40期班级同学的名字：张琦 >>> print("40期班级同学的名字："+ student + "\n老师的名字："+teacher) 40期班级同学的名字：张琦 老师的名字：阿宸 >>> print("40期班级同学的名字："+ student + "\n老师的名字：\t"+teacher) 40期班级同学的名字：张琦 老师的名字： 阿宸 >>> print("40期班级同学的名字："+ student + "\n老师的名字：\t\t"+teacher) 40期班级同学的名字：张琦 老师的名字： 阿宸 >>> print("40期班级同学的名字：\t"+ student + "\n老师的名字：\t\t"+teacher) 40期班级同学的名字： 张琦 老师的名字： 阿宸 >>> str7 = "sdvsd\ndf\tbsdh\nsdfbs" >>> print(str7) sdvsd df bsdh sdfbs >>> str7 = "sdvsd\\ndf\\tbsdh\\nsdfbs" >>> str7 'sdvsd\\ndf\\tbsdh\\nsdfbs' >>> print(str7) sdvsd\ndf\tbsdh\nsdfbs >>> str8 = r"sdvsd\ndf\tbsdh\nsdfbs" >>> print(str8) sdvsd\ndf\tbsdh\nsdfbs \" 让字符串输出双引号 \' 同上 \n 换行 \t 制表符 \\ r''原始字符串，将字符串原封不动的输出，取消原有的转义 三引号
君不见，黄河之水天上来，奔流到海不复回。 君不见，高堂明镜悲白发，朝如青丝暮成雪！ 人生得意须尽欢，莫使金樽空对月。 天生我材必有用，千金散尽还复来。 烹羊宰牛且为乐，会须一饮三百杯。 岑夫子，丹丘生，将进酒，杯莫停。 与君歌一曲，请君为我倾耳听。 钟鼓馔玉不足贵，但愿长醉不复醒。 古来圣贤皆寂寞，惟有饮者留其名。 陈王昔时宴平乐，斗酒十千恣欢谑。 主人何为言少钱，径须沽取对君酌。 五花马、千金裘， 呼儿将出换美酒，与尔同销万古愁！
verser = ''' 君不见，黄河之水天上来，奔流到海不复回。 君不见，高堂明镜悲白发，朝如青丝暮成雪！ 人生得意须尽欢，莫使金樽空对月。 天生我材必有用，千金散尽还复来。 烹羊宰牛且为乐，会须一饮三百杯。 岑夫子，丹丘生，将进酒，杯莫停。 与君歌一曲，请君为我倾耳听。 钟鼓馔玉不足贵，但愿长醉不复醒。 古来圣贤皆寂寞，惟有饮者留其名。 陈王昔时宴平乐，斗酒十千恣欢谑。 主人何为言少钱，径须沽取对君酌。 五花马、千金裘， 呼儿将出换美酒，与尔同销万古愁！ ''' print(verser) 四、交互式与脚本模式 交互模式：相当于问答模式，关闭就取消无法保存
脚本模式：可以将代码进行一个长期的保存
作业 1.定义 姓名、性别、年龄、职业、微信余额 进行输出
2.用两种方式输出下面这一句话
班主任老师说：“今天主讲老师有事，停课一节”
3.可以使用转义字符下面古诗两种格式
格式一：
床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。 格式二：
床前明月光，疑是地上霜。 举头望明月，低头思故乡。</content></entry><entry><title>变量与基本数据类型</title><url>https://mimanchi01.github.io/post/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url><categories><category>python</category></categories><tags><tag>python</tag></tags><content type="html"> Python基础知识总结（一）
一、变量（Variable） 会变化的量。日常生活中什么是变量:钱、头发，时间……
Python中如何去定义一个变量：
变量名 = 变量值 name = value # = 赋值符号（赋值过程，右边的值赋值到左边） 当print后面的括号中放的是变量的话不需要加引号
>>> name = '阿宸' >>> print(name) 阿宸 >>> age = 18 >>> print(age) 18 1.2 变量的命名方式与规则 变量名的组成 : 英文字母、数字、下划线（变量名中数字不能开头）
Python是区分大小写
命名格式：
驼峰式命名：
大驼峰：每个单词的首字母大写
小驼峰：除了第一个单词外，往后的每个单词首字母大写
>>> MyName = '黄泽鑫' >>> print(MyName) 黄泽鑫 >>> myName = '阿宸' >>> print(myName) 阿宸 >>> myname = '杨凤' >>> print(myname) 杨凤 >>> Myname = '刘静宜' >>> print(Myname) 刘静宜 >>> youname = '李耀' >>> print(youname) 李耀 链式：用下划线对每个单词进行连接
>>> my_age = 18 >>> print(my_age) 18 Python中将名字全部大写表示一个常量
Python中内置的关键字（标识符）是不可以用来命名。
>>> import keyword >>> keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] Python中内置的函数不建议用来做变量名，当使用内置函数进行变量命名的话，该函数的原本含义会被覆盖，无法使用该函数的原本含义，Python解释器会报错
>>> print = '章林' >>> print '章林' >>> print('我叫罗炜') Traceback (most recent call last): File "&lt;pyshell#6>", line 1, in &lt;module> print('我叫罗炜') TypeError: 'str' object is not callable 变量命名一定要见名之意
本质：就是用来存放数据
二、注释 注释:就是对代码进行解释说明，注释是不会被解释运行出来的，只是给我们人看的。增加代码的可读性。
python中注释分为两种：单行注释；多行注释
2.1单行注释 使用 # 表示
>>> age = 18 # 这个是阿宸的年龄 >>> age 18 >>> # 这是40期的同学的名字 >>> name = '杨宝龙' >>> name '杨宝龙' 2.2 多行注释 使用三引号
''' 我是多行注释 这是第二行 这是第三行 ''' print('我叫刘一飞') """ 我是多行注释 这是第二行 这是第三行 """ print('我叫王亚琪') 一篇完整的代码其中注释要包括全篇的1/3篇幅
三、基本数据类型（type） 3.1整型（int） 用来存放整数的。比如：年龄，人
注意：整数的第一位不能是0（0除外）
>>> age = 18 >>> age 18 >>> people = 1 >>> people 1 3.2 浮点型（float） 浮点型就是小数；比如：圆周率、体重、身高
>>> money = 3.9 >>> money 3.9 >>> height = 1.8 >>> height 1.8 >>> weight = 73 >>> weight 73 >>> weight = 73.5 >>> weight 73.5 验证数据类型
>>> age = 18 >>> height = 1.8 >>> type(age) &lt;class 'int'> >>> type(height) &lt;class 'float'> 3.4 布尔类型（bool） 简单理解：就是判断对错真假
结果只有两种;True 、False
>>> 25+22 &lt; 22 False >>> 22+22 &lt; 55 True 3.5 字符串（str） 字符串是需要用引号进行括起来才属于字符串（单、双、三引号）
>>> str1 = '今天是Python开发基础的第二天' >>> print(str1) 今天是Python开发基础的第二天 >>> str2 = "今天依然还是阿宸" >>> print(str2) 今天依然还是阿宸 # 阿宸说:"明天就双休啦！" 引号嵌套与转义字符
嵌套：不同类型的引号可以相互嵌套
>>> str3 = '阿宸说:"明天就双休啦！"' >>> print(str3) 阿宸说:"明天就双休啦！" >>> str4 = "阿宸说:\"明天就双休啦！\"" >>> print(str4) 阿宸说:"明天就双休啦！" >>> str5 = '阿宸\n黄泽鑫' >>> print(str5) 阿宸 黄泽鑫 >>> student = '张琦' >>> teacher = '阿宸' >>> print("40期班级同学的名字："+ student) 40期班级同学的名字：张琦 >>> print("40期班级同学的名字："+ student + "\n老师的名字："+teacher) 40期班级同学的名字：张琦 老师的名字：阿宸 >>> print("40期班级同学的名字："+ student + "\n老师的名字：\t"+teacher) 40期班级同学的名字：张琦 老师的名字： 阿宸 >>> print("40期班级同学的名字："+ student + "\n老师的名字：\t\t"+teacher) 40期班级同学的名字：张琦 老师的名字： 阿宸 >>> print("40期班级同学的名字：\t"+ student + "\n老师的名字：\t\t"+teacher) 40期班级同学的名字： 张琦 老师的名字： 阿宸 >>> str7 = "sdvsd\ndf\tbsdh\nsdfbs" >>> print(str7) sdvsd df bsdh sdfbs >>> str7 = "sdvsd\\ndf\\tbsdh\\nsdfbs" >>> str7 'sdvsd\\ndf\\tbsdh\\nsdfbs' >>> print(str7) sdvsd\ndf\tbsdh\nsdfbs >>> str8 = r"sdvsd\ndf\tbsdh\nsdfbs" >>> print(str8) sdvsd\ndf\tbsdh\nsdfbs \" 让字符串输出双引号 \' 同上 \n 换行 \t 制表符 \\ r''原始字符串，将字符串原封不动的输出，取消原有的转义 三引号
君不见，黄河之水天上来，奔流到海不复回。 君不见，高堂明镜悲白发，朝如青丝暮成雪！ 人生得意须尽欢，莫使金樽空对月。 天生我材必有用，千金散尽还复来。 烹羊宰牛且为乐，会须一饮三百杯。 岑夫子，丹丘生，将进酒，杯莫停。 与君歌一曲，请君为我倾耳听。 钟鼓馔玉不足贵，但愿长醉不复醒。 古来圣贤皆寂寞，惟有饮者留其名。 陈王昔时宴平乐，斗酒十千恣欢谑。 主人何为言少钱，径须沽取对君酌。 五花马、千金裘， 呼儿将出换美酒，与尔同销万古愁！
verser = ''' 君不见，黄河之水天上来，奔流到海不复回。 君不见，高堂明镜悲白发，朝如青丝暮成雪！ 人生得意须尽欢，莫使金樽空对月。 天生我材必有用，千金散尽还复来。 烹羊宰牛且为乐，会须一饮三百杯。 岑夫子，丹丘生，将进酒，杯莫停。 与君歌一曲，请君为我倾耳听。 钟鼓馔玉不足贵，但愿长醉不复醒。 古来圣贤皆寂寞，惟有饮者留其名。 陈王昔时宴平乐，斗酒十千恣欢谑。 主人何为言少钱，径须沽取对君酌。 五花马、千金裘， 呼儿将出换美酒，与尔同销万古愁！ ''' print(verser) 四、交互式与脚本模式 交互模式：相当于问答模式，关闭就取消无法保存
脚本模式：可以将代码进行一个长期的保存
作业 1.定义 姓名、性别、年龄、职业、微信余额 进行输出
2.用两种方式输出下面这一句话
班主任老师说：“今天主讲老师有事，停课一节”
3.可以使用转义字符下面古诗两种格式
格式一：
床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。 格式二：
床前明月光，疑是地上霜。 举头望明月，低头思故乡。</content></entry><entry><title>Markdown语法手册</title><url>https://mimanchi01.github.io/post/other_matters/markdown-syntax/</url><categories><category>themes</category><category>syntax</category></categories><tags><tag>markdown</tag><tag>css</tag><tag>html</tag></tags><content type="html"> 本文提供了一个可以在 Hugo 内容文件中使用的基本Markdown语法示例，还展示了基本 HTML 元素在 Hugo 主题中是否使用 CSS 装饰。
标题 下面的 HTML 代码&lt;h1>—&lt;h6> 元素表示六个级别的节标题。 &lt;h1>是最高的节级别，&lt;h6>是最低的节级别。
H1 H2 H3 H4 H5 H6 段落 Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.
伊塔图？厨房里有很多东西，我不知道他们喜欢吃什么，或者他们喜欢吃什么。
引用 blockquote元素表示从另一个来源引用的内容，可选的引用必须在footer或cite元素内，也可选的内嵌更改，如注释和缩写。
引用没有归属 Tiam, ad mint andaepu dandae nostion secatur sequo quae. 注意 可以在块引用中使用 Markdown 语法。
带归属的引用 不要通过分享记忆来交流，通过交流来分享记忆。
— 罗布·派克1
表格 表不是Markdown核心规范的一部分，但是Hugo支持开箱即用。
Name Age Bob 27 Alice 23 表格内使用Markdown语法 Italics Bold Code italics bold code 图像 ![图像描述](图像地址) 示例 Google Chrome Firefox Browser
点击图像可以打开图像浏览器，快试试吧。
代码块 带有引号的代码块 &lt;!doctype html> &lt;html lang="en"> &lt;head> &lt;meta charset="utf-8"> &lt;title>Example HTML5 Document&lt;/title> &lt;/head> &lt;body> &lt;p>Test&lt;/p> &lt;/body> &lt;/html> 用四个空格缩进的代码块 &lt;!doctype html> &lt;html lang="en"> &lt;head> &lt;meta charset="utf-8"> &lt;title>Example HTML5 Document&lt;/title> &lt;/head> &lt;body> &lt;p>Test&lt;/p> &lt;/body> &lt;/html> 代码块引用Hugo的内部高亮短代码 &lt;!doctype html> &lt;html lang="en"> &lt;head> &lt;meta charset="utf-8"> &lt;title>Example HTML5 Document&lt;/title> &lt;/head> &lt;body> &lt;p>Test&lt;/p> &lt;/body> &lt;/html> 列表类型 有序列表 First item Second item Third item 无序列表 List item Another item And another item 嵌套列表 Fruit Apple Orange Banana Dairy Milk Cheese 其他元素 — abbr, sub, sup, kbd, mark GIF 是位图图像格式。
H2O
Xn + Yn = Zn
按 CTRL+ALT+Delete 组合键结束会话。
大多数蝾螈在夜间活动，捕食昆虫、蠕虫和其他小动物。
以上引文摘自Rob Pike在2015年11月18日Gopherfest上的演讲。&#160;&#8617;&#xfe0e;</content></entry><entry><title>富文本内容测试</title><url>https://mimanchi01.github.io/post/other_matters/rich-content/</url><categories/><tags><tag>shortcodes</tag><tag>privacy</tag></tags><content type="html"> Hugo上有几个内置短代码，用于丰富内容，以及隐私配置还有一组简单的短代码，支持各种社交媒体嵌入的静态和非JS版本。
YouTube Privacy Enhanced Shortcode Vimeo Simple Shortcode .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }</content></entry><entry><title>占位符文本显示</title><url>https://mimanchi01.github.io/post/other_matters/placeholder-text/</url><categories/><tags><tag>markdown</tag><tag>text</tag></tags><content type="html"> 你对我的心有偏见。我向您保证，我们的生活将不会受到影响，我们的生活将会受到影响。你说你现在住在医院里，因为你的眼睛是透明的，你的眼睛是光明的，你的眼睛是光明的!
Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.
Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt
The Van de Graaf Canon
Mane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.
Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.
Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.</content></entry><entry><title>数据公式设置显示</title><url>https://mimanchi01.github.io/post/other_matters/math-typesetting/</url><categories/><tags/><content type="html"> Hugo项目中的数学表示法可以通过使用第三方JavaScript库来实现。
在这个例子中，我们将使用 MathJax
Create a post under /content/en[zh-CN]/math.md
可以全局启用MathJax，请在项目配置中将参数math设置为true
或是在每页基础上启用MathJax，在内容文件中包括参数math: true
注意： 使用支持的TeX功能的联机参考资料
例子 重复的分数 $$ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } } $$
总和记号 $$ \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) $$
几何级数之和 我把接下来的两个例子分成了几行，这样它在手机上表现得更好。这就是为什么它们包含 \displaystyle。
$$ \displaystyle\sum_{i=1}^{k+1}i $$
$$ \displaystyle= \left(\sum_{i=1}^{k}i\right) +(k+1) $$
$$ \displaystyle= \frac{k(k+1)}{2}+k+1 $$
$$ \displaystyle= \frac{k(k+1)+2(k+1)}{2} $$
$$ \displaystyle= \frac{(k+1)(k+2)}{2} $$
$$ \displaystyle= \frac{(k+1)((k+1)+1)}{2} $$
乘记号 $$ \displaystyle 1 + \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \displaystyle \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \displaystyle\text{ for }\lvert q\rvert &lt; 1. $$
随文数式 这是一些线性数学: $$ k_{n+1} = n^2 + k_n^2 - k_{n-1} $$ ， 然后是更多的文本。
希腊字母 $$ \Gamma\ \Delta\ \Theta\ \Lambda\ \Xi\ \Pi\ \Sigma\ \Upsilon\ \Phi\ \Psi\ \Omega \alpha\ \beta\ \gamma\ \delta\ \epsilon\ \zeta\ \eta\ \theta\ \iota\ \kappa\ \lambda\ \mu\ \nu\ \xi \ \omicron\ \pi\ \rho\ \sigma\ \tau\ \upsilon\ \phi\ \chi\ \psi\ \omega\ \varepsilon\ \vartheta\ \varpi\ \varrho\ \varsigma\ \varphi $$
箭头 $$ \gets\ \to\ \leftarrow\ \rightarrow\ \uparrow\ \Uparrow\ \downarrow\ \Downarrow\ \updownarrow\ \Updownarrow $$
$$ \Leftarrow\ \Rightarrow\ \leftrightarrow\ \Leftrightarrow\ \mapsto\ \hookleftarrow \leftharpoonup\ \leftharpoondown\ \rightleftharpoons\ \longleftarrow\ \Longleftarrow\ \longrightarrow $$
$$ \Longrightarrow\ \longleftrightarrow\ \Longleftrightarrow\ \longmapsto\ \hookrightarrow\ \rightharpoonup $$
$$ \rightharpoondown\ \leadsto\ \nearrow\ \searrow\ \swarrow\ \nwarrow $$
符号 $$ \surd\ \barwedge\ \veebar\ \odot\ \oplus\ \otimes\ \oslash\ \circledcirc\ \boxdot\ \bigtriangleup $$
$$ \bigtriangledown\ \dagger\ \diamond\ \star\ \triangleleft\ \triangleright\ \angle\ \infty\ \prime\ \triangle $$
微积分学 $$ \int u \frac{dv}{dx},dx=uv-\int \frac{du}{dx}v,dx $$
$$ f(x) = \int_{-\infty}^\infty \hat f(\xi),e^{2 \pi i \xi x} $$
$$ \oint \vec{F} \cdot d\vec{s}=0 $$
洛伦茨方程 $$ \begin{aligned} \dot{x} &amp; = \sigma(y-x) \ \dot{y} &amp; = \rho x - y - xz \ \dot{z} &amp; = -\beta z + xy \end{aligned} $$
交叉乘积 这在KaTeX中是可行的，但在这种环境中馏分的分离不是很好。
$$ \mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \ \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix} $$
这里有一个解决方案:使用“mfrac”类(在MathJax情况下没有区别)的额外类使分数更小:
$$ \mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \ \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix} $$
强调 $$ \hat{x}\ \vec{x}\ \ddot{x} $$
有弹性的括号 $$ \left(\frac{x^2}{y^3}\right) $$
评估范围 $$ \left.\frac{x^3}{3}\right|_0^1 $$
诊断标准 $$ f(n) = \begin{cases} \frac{n}{2}, &amp; \text{if } n\text{ is even} \ 3n+1, &amp; \text{if } n\text{ is odd} \end{cases} $$
麦克斯韦方程组 $$ \begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \ \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \ \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \ \nabla \cdot \vec{\mathbf{B}} &amp; = 0 \end{aligned} $$
这些方程式很狭窄。我们可以使用(例如)添加垂直间距 [1em] 在每个换行符(\)之后。正如你在这里看到的：
$$ \begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \[1em] \nabla \cdot \vec{\mathbf{E}} &amp; = 4 \pi \rho \[0.5em] \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp; = \vec{\mathbf{0}} \[1em] \nabla \cdot \vec{\mathbf{B}} &amp; = 0 \end{aligned} $$
统计学 固定词组：
$$ \frac{n!}{k!(n-k)!} = {^n}C_k {n \choose k} $$
分数在分数 $$ \frac{\frac{1}{x}+\frac{1}{y}}{y-z} $$
ｎ次方根 $$ \sqrt[n]{1+x+x^2+x^3+\ldots} $$
矩阵 $$ \begin{pmatrix} a_{11} &amp; a_{12} &amp; a_{13}\ a_{21} &amp; a_{22} &amp; a_{23}\ a_{31} &amp; a_{32} &amp; a_{33} \end{pmatrix} \begin{bmatrix} 0 &amp; \cdots &amp; 0 \ \vdots &amp; \ddots &amp; \vdots \ 0 &amp; \cdots &amp; 0 \end{bmatrix} $$
标点符号 $$ f(x) = \sqrt{1+x} \quad (x \ge -1) f(x) \sim x^2 \quad (x\to\infty) $$
现在用标点符号:
$$ f(x) = \sqrt{1+x}, \quad x \ge -1 f(x) \sim x^2, \quad x\to\infty $$</content></entry><entry><title>支持Emoji表情符号</title><url>https://mimanchi01.github.io/post/other_matters/emoji-support/</url><categories/><tags><tag>emoji</tag></tags><content type="html"> 在Hugo项目中可以通过多种方式启用Emoji。
The emojify function can be called directly in templates or Inline Shortcodes.
To enable emoji globally, set enableEmoji to true in your site&rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.
馃檲 🙈 馃檳 🙉 馃檴 🙊
The Emoji cheat sheet is a useful reference for emoji shorthand codes.
N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.
.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }</content></entry><entry><title>关于我</title><url>https://mimanchi01.github.io/about.html</url><categories/><tags/><content type="html"> Hugo是用Go编写的一个开放源代码静态站点生成器，可在Apache许可证2.0下使用。 Hugo支持TOML, YAML和JSON数据文件类型，Markdown和HTML内容文件，并使用短代码添加丰富的内容。其他值得注意的功能包括分类法、多语言模式、图像处理、自定义输出格式、HTML/CSS/JS缩小和对Sass SCSS工作流的支持。
Hugo使用了多种开源项目，包括:
https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo是博客、企业网站、创意作品集、在线杂志、单页应用程序甚至是数千页的网站的理想选择。
Hugo适合那些想要手工编写自己的网站代码，而不用担心设置复杂的运行时、依赖关系和数据库的人。
使用Hugo建立的网站非常快速、安全，可以部署在任何地方，包括AWS、GitHub Pages、Heroku、Netlify和任何其他托管提供商。
更多信息请访问GitHub.</content></entry></search>